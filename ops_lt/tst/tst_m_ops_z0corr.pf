@test
subroutine tst_ops_z0corr

use funit
use m_error
use m_ops_z0corr

implicit none

! input
REAL*4 :: z01                        ! standard roughness length [m]
REAL*4 :: uster1                     ! friction velocity at standard roughness length 
REAL*4 :: ol1                        ! Monin-Obukhov length at standard roughness length [m]
REAL*4 :: z02                        ! new roughness length [m]

! SUBROUTINE ARGUMENTS - OUTPUT
REAL*4 :: uster2                     ! friction velocity at new roughness length 
REAL*4 :: ol2                        ! Monin-Obukhov length at standard roughness length [m]

! SUBROUTINE ARGUMENTS - INPUT/OUTPUT
TYPE(Terror) :: error                      ! error handling structure
real   :: tol = 0.1

! First test, no change
z01 = 0.3; uster1 = 2.0; ol1 = 80.0; z02 = z01 
call ops_z0corr(z01, uster1, ol1, z02, uster2, ol2, error)

@assertEqual(uster1, uster2, tol, message='Test 1, uster')
@assertEqual(ol1, ol2, tol, message='Test 1, ol')

! Second test, ol > 0
z01 = 0.3; uster1 = 2.0; ol1 = 80.0; z02 = 0.8
call ops_z0corr(z01, uster1, ol1, z02, uster2, ol2, error)

! values 2021-08-09
@assertEqual(2.943749, uster2, tol, message='Test 2, uster')
@assertEqual(188.3952, ol2, tol, message='Test 2, ol')

! Third test, ol < 0
z01 = 0.3; uster1 = 2.0; ol1 = -100.0; z02 = 0.8
call ops_z0corr(z01, uster1, ol1, z02, uster2, ol2, error)

! values 2021-08-09
@assertEqual(2.424499, uster2, tol, message='Test 3, uster')
@assertEqual(-174.6149, ol2, tol, message='Test 3, ol')

end subroutine tst_ops_z0corr
