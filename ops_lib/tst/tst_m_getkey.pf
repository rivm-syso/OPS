@test
!-------------------------------------------------------------------------------------------------------------------------------
!
! This program is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! This program is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.
!
!-------------------------------------------------------------------------------------------------------------------------------
! DESCRIPTION          : General utilities
! TESTED HERE 
!                        - GetKeyValue
!                             get_key_integer
!                             get_key_integer_string
!                             get_key_real
!                             get_key_logical
!                             get_key_string
!                        
! NOT TESTED HERE
!                        - GetCheckedKey
!-------------------------------------------------------------------------------------------------------------------------------
subroutine tst_GetKeyValue

USE funit
USE m_getkey
USE m_error
use m_commonfile, only: IOB_STDOUT, fu_input

IMPLICIT NONE

integer, parameter :: mtest = 100                ! maximal number of tests
real          :: rval                            ! real value read from string
integer       :: ival                            ! integer value read from string
logical       :: lval                            ! logical value read from string
character(len = 100) :: strval                   ! string value read from string
type(Terror)  :: error                           ! error structure
character(len = 100) :: str_(mtest)              ! strings written to/read from file
real          :: rval0(mtest)                    ! reference value for real value read from string, for each test
integer       :: ival0(mtest)                    ! reference value for integer value read from string, for each test
logical       :: lval0(mtest)                    ! reference value for logical value read from string, for each test
character(len = 100) :: strval0(mtest)           ! reference value for string value read from string, for each test
logical       :: error0(mtest)                   ! reference value for error%haserror, for each test
logical       :: isrequired0(mtest)              ! logical is required

logical       :: key_found                       ! key has been found
character(len = 60)   :: msg                     ! message for assertEqual

character(len = 30)   :: rname(5)                ! routine names
integer               :: i_rname(mtest)          ! index into routine names for each test
integer               :: i                       ! index of test
integer               :: i_end                   ! index of last test

! GetKeyValue reads from fu_input:
open(fu_input, file='./tst/resources/tst_m_getkey.in')
rewind(fu_input)

! Default reference values: 
ival0   = -999
rval0   = -999.0
lval0   = .false.
strval0 = ''
isrequired0 = .false.

! Set names of routines to test
rname(1) = 'get_key_integer'
rname(2) = 'get_key_integer_string'
rname(3) = 'get_key_real'
rname(4) = 'get_key_logical'
rname(5) = 'get_key_string'

! Define records to be read later on and set reference data (ival0,rval0,lval0 or strval0) for each record:
i = 1;     str_(i) = 'TEST 10'                                  ; i_rname(i) = 1; ival0(i) = 10     ; error0(i) = .false.
i = i + 1; str_(i) = 'TEST'                                     ; i_rname(i) = 1; ival0(i) = -9999  ; error0(i) = .false.
i = i + 1; str_(i) = 'TEST 12 hallo1'                           ; i_rname(i) = 1; ival0(i) = 12     ; error0(i) = .false.
i = i + 1; str_(i) = 'TEST 99hallo2'                            ; i_rname(i) = 1; ival0(i) = -999   ; error0(i) = .true.
i = i + 1; str_(i) = 'TEST 13 hallo3'                           ; i_rname(i) = 2; ival0(i) = 13     ; strval0(i) = 'hallo3'; error0(i) = .false.
i = i + 1; str_(i) = 'TEST 14 hallo4 ! comment'                 ; i_rname(i) = 2; ival0(i) = 14     ; strval0(i) = 'hallo4'; error0(i) = .false.
i = i + 1; str_(i) = 'TEST 15 ! comment2'                       ; i_rname(i) = 2; ival0(i) = 15     ; strval0(i) = ''      ; error0(i) = .false.
i = i + 1; str_(i) = 'TEST'                                     ; i_rname(i) = 2; ival0(i) = -9999  ; strval0(i) = ''      ; error0(i) = .false.
i = i + 1; str_(i) = 'TEST 16.0'                                ; i_rname(i) = 3; rval0(i) = 16.0   ; error0(i) = .false.
i = i + 1; str_(i) = 'TEST 17.0 ! comment'                      ; i_rname(i) = 3; rval0(i) = 17.0 ; error0(i) = .false.
i = i + 1; str_(i) = 'TEST 1'                                   ; i_rname(i) = 4; lval0(i) = .true. ; error0(i) = .false.
i = i + 1; str_(i) = 'TEST 0'                                   ; i_rname(i) = 4; lval0(i) = .false.; error0(i) = .false.
i = i + 1; str_(i) = 'TEST -9999'                               ; i_rname(i) = 4; lval0(i) = .false.; error0(i) = .false.
i = i + 1; str_(i) = 'TEST -9999 ! isrequired'                  ; i_rname(i) = 4; lval0(i) = .false.; error0(i) = .true.; isrequired0(i) = .true.
i = i + 1; str_(i) = 'TEST 2'                                   ; i_rname(i) = 4; lval0(i) = .false.; error0(i) = .true.
i = i + 1; str_(i) = 'TEST this is a string'                    ; i_rname(i) = 5; strval0(i) = 'this is a string' ; error0(i) = .false.
i = i + 1; str_(i) = 'TEST this is a string2 ! this is comment' ; i_rname(i) = 5; strval0(i) = 'this is a string2'; error0(i) = .false.
i = i + 1; str_(i) = 'TESTX 18.0 ! incorrect key'               ; i_rname(i) = 3; rval0(i) = 18.0; error0(i) = .true.
i_end = i;

! Output of tests:
!            routine                            string                                               ival     rval  lval error key_found strval
!=== test 01 get_key_integer                ==="TEST 10                                           "    10   -888.0     F     F     T "---"
!=== test 02 get_key_integer                ==="TEST                                              " -9999   -888.0     F     F     T "---"
!=== test 03 get_key_integer                ==="TEST 12 hallo1                                    "    12   -888.0     F     F     T "---"
!=== test 04 get_key_integer                ==="TEST 99hallo2                                     "  -888   -888.0     F     T     F "---"
!=== test 05 get_key_integer_string         ==="TEST 13 hallo3                                    "    13   -888.0     F     F     T "hallo3"
!=== test 06 get_key_integer_string         ==="TEST 14 hallo4 ! comment                          "    14   -888.0     F     F     T "hallo4"
!=== test 07 get_key_integer_string         ==="TEST 15 ! comment2                                "    15   -888.0     F     F     T ""
!=== test 08 get_key_integer_string         ==="TEST                                              " -9999   -888.0     F     F     T ""
!=== test 09 get_key_real                   ==="TEST 16.0                                         "  -888     16.0     F     F     T "---"
!=== test 10 get_key_real                   ==="TEST 17.0 ! comment                               "  -888     17.0     F     F     T "---"
!=== test 11 get_key_logical                ==="TEST 1                                            "  -888   -888.0     T     F     T "---"
!=== test 12 get_key_logical                ==="TEST 0                                            "  -888   -888.0     F     F     T "---"
!=== test 13 get_key_logical                ==="TEST -9999                                        "  -888   -888.0     F     F     T "---"
!=== test 14 get_key_logical                ==="TEST -9999 ! isrequired                           "  -888   -888.0     F     T     F "---"
!=== test 15 get_key_logical                ==="TEST 2                                            "  -888   -888.0     F     T     F "---"
!=== test 16 get_key_string                 ==="TEST this is a string                             "  -888   -888.0     F     F     T "this is a string"
!=== test 17 get_key_string                 ==="TEST this is a string2 ! this is comment          "  -888   -888.0     F     F     T "this is a string2"
!=== test 18 get_key_real                   ==="TESTX 18.0 ! incorrect key                        "  -888   -888.0     F     T     F "---"

! Note: key_found = .not. error%haserror (in these tests)

! Write records to file:
do i = 1,i_end
   write(fu_input,'(a)') str_(i)
enddo
rewind(fu_input)

! Output to screen:
!write(*,*) ''
!write(*,'(a30,1x,a50,2x,a5,1x,a8,3(1x,a5),1x,a,a,a)') & 
!    'routine','string','ival','rval','lval','error','key_found','strval'

! Loop over tests:
do i = 1,i_end

   ! Reset values:
   ival    = -888
   rval    = -888.0
   lval    = .false.
   strval  = '---'
   error%haserror = .false. 
   
   ! Message for assertEqual:
   write(msg,'(a,i2.2,3a)') '=== test ',i,' ',rname(i_rname(i)),' === '
   
   ! Get key - value:
   if (i_rname(i) .eq. 1) then
      ! 'get_key_integer'
      key_found = GetKeyValue('TEST', ival, error)
   elseif (i_rname(i) .eq. 2) then
      ! 'get_key_integer_string'
      key_found = GetKeyValue('TEST', ival, strval, error)
   elseif (i_rname(i) .eq. 3) then
      ! 'get_key_real'
      key_found = GetKeyValue('TEST', rval, error)
   elseif (i_rname(i) .eq. 4) then
      ! 'get_key_logical'
      key_found = GetKeyValue('TEST', isrequired0(i), lval, error)
   elseif (i_rname(i) .eq. 5) then
      ! 'get_key_string'
      key_found = GetKeyValue('TEST', strval, error)
   endif
   
   ! Outptu to screen:
   !write(*,'(a,''"'',a50,''"'',1x,i5,1x,f8.1,3(1x,l5),1x,a,a,a)') & 
   !   trim(msg),adjustl(str_(i)),ival,rval,lval,error%haserror,key_found,'"',trim(strval),'"'
      
   ! Check if error has been trapped:
   if (error0(i)) then
      ! Expected error:
      @assertEqual(.true.,error%haserror,message=trim(msg)//' - error%haserror ===')

   else
      ! Unexpected error:
      if (error%haserror) goto 9999   
      
      if (i_rname(i) .eq. 1) then
         ! 'get_key_integer'
         @assertEqual(ival0(i),ival,message = msg)
      elseif (i_rname(i) .eq. 2) then
         ! 'get_key_integer_string'
         @assertEqual(ival0(i),ival,message = msg)
         @assertEqual(strval0(i),strval,message = msg)
      elseif (i_rname(i) .eq. 3) then
         ! 'get_key_real'
         @assertEqual(rval0(i),rval,message = msg)
      elseif (i_rname(i) .eq. 4) then
         ! 'get_key_logical'
         @assertEqual(lval0(i),lval,message = msg)
      elseif (i_rname(i) .eq. 5) then
         ! 'get_key_string'
         @assertEqual(strval0(i),strval,message = msg)
      endif
   endif
enddo

return

9999 CALL ErrorCall('tst_GetKeyValue', error)
call write_error(IOB_STDOUT,error)

end subroutine tst_GetKeyValue
